#include <stdio.h>
#define MAX_N 10

int x_stack[11]= {0}, y_stack[11]={0}, top = -1;
int x_pop(), y_pop(), is_empty(), mark_down();
void push();
int maze[10][10] = {
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
        { 0, 0, 0, 1, 1, 0, 1, 1, 0, 1 },
        { 1, 0, 1, 1, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 1, 0, 1, 0, 1 },
        { 1, 1, 1, 0, 1, 1, 0, 1, 1, 1 },
        { 1, 0, 1, 1, 1, 0, 0, 1, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 1, 1, 0, 0 },
        { 1, 0, 1, 1, 1, 1, 1, 0, 0, 1 },
        { 1, 0, 0, 0, 1, 0, 0, 0, 1, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
    };//start(0, 1)

//up, right, down, left, mark down
int main(){
    int x=0, y=1;

    while(1){
        if (maze[x][y-1] == 0){ //up
            push(x, y-1);
            mark_down(x, y-1);
        }
        else if (maze[x+1][y] == 0){ //right
            push(x+1, y);
            mark_down(x+1, y);
        }
        else if (maze[x][y+1] == 0){ //down
            push(x, y+1);
            mark_down(x, y+1);
        }
        else if (maze[x][y-1] == 0){ //left
            push(x, y-1);
            mark_down(x, y-1);
        }
        else {
            if (is_empty()){
                printf("the rat got stuck@@\n");
                break;
            }  //no way
            if (top > 17 ){//due to this arr
                printf("the rat found the way\n");
                for(int i=0; i<10; i++){
                    for (int j=0; j<10; j++){
                        printf(maze[i][j]);
                    }
                }
            }
            top--; //go back, no :x--; y--;
            //question: maze's record needed to be recover?
            x = x_stack[top];
            y = y_stack[top];
            //when to break the loop???-> the stack is full?

        }


    }
    return 0;
}


void push(int xaxis, int yaxis){
    top++;
    x_stack[top] = xaxis;
    y_stack[top] = yaxis;
}

//there is return value
/*int y_pop(){
    int data;
    data = y_stack[top];
    top--;
    return data;
}

int x_pop(){
    int data;
    data = x_stack[top];
    top--;
    return data;
}*/

// use top to judge
int is_empty(){
    if (top<0) return 1;
    else return 0;
}

int mark_down(int xaxis, int yaxis){
    maze[xaxis][yaxis] = 2;
    return maze[xaxis][yaxis];
}
